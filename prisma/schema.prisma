// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id            Int       @id @default(autoincrement())
    title         String
    slug          String    @unique
    excerpt       String?
    content       String
    featuredImage String?
    published     Boolean   @default(false)
    publishedAt   DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([published])
    @@index([slug])
    @@index([publishedAt])
}

// Admin user model - simplified for single admin
model User {
    id            String    @id @default(cuid())
    email         String    @unique
    name          String?
    image         String?
    role          UserRole  @default(ADMIN)
    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Auth relations (keeping minimal NextAuth support)
    accounts Account[]
    sessions Session[]

    // Blog relations
    posts Post[]
}

enum UserRole {
    ADMIN
}

// Simplified NextAuth tables (keeping minimal for admin auth)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
